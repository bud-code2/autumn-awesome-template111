name: ci-server-dev

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      linter_for_committed_files_only:
        required: false
        default: false
        type: boolean
      run_server_jobs:
        required: false
        default: true
        type: boolean
      run_webapp_jobs:
        required: false
        default: true
        type: boolean

jobs:
  # CI for FastAPI Server
  install-dependencies:
    name: install-dependencies
    if: inputs.run_server_jobs == true
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: /opt/venv

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: /opt/venv
          key: venv-${{ runner.os }}-python-3.13.3-${{ hashFiles('server/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: server
        run: poetry install --no-interaction --no-root

  test:
    name: test
    needs: install-dependencies
    if: inputs.run_server_jobs == true
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: /opt/venv

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: /opt/venv
          key: venv-${{ runner.os }}-python-3.13.3-${{ hashFiles('server/poetry.lock') }}

      - name: Run tests
        working-directory: server
        env:
          SECURITY__JWT_SECRET_KEY: very-not-secret
          DATABASE__HOSTNAME: localhost
          DATABASE__PASSWORD: postgres
        run: poetry run pytest

  type_check:
    needs: install-dependencies
    if: inputs.run_server_jobs == true
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    strategy:
      matrix:
        check: ["ruff check", "ruff format --check"]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13.3"
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: /opt/venv
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: /opt/venv
          key: venv-${{ runner.os }}-python-3.13.3-${{ hashFiles('server/poetry.lock') }}

      - name: Run ${{ matrix.check }}
        working-directory: server
        env:
          SECURITY__JWT_SECRET_KEY: very-not-secret
          DATABASE__HOSTNAME: localhost
          DATABASE__PASSWORD: postgres
        run: poetry run ${{ matrix.check }} .

  dev_build:
    name: Build and Push Docker Image To ECR
    needs: [test, type_check]
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
          aws-region: "ap-northeast-1"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        working-directory: server
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: autumn-awesome
          IMAGE_TAG: ${{ github.event.inputs.tag || 'latest' }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
